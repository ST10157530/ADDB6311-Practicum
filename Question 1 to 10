-- Step 1: Drop Tables if they exist to avoid errors
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE DiveEvent CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Dive CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Instructor CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Customer CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- Step 2: Create Tables
CREATE TABLE Instructor (
    INS_ID INT PRIMARY KEY,
    INS_FNAME VARCHAR2(50),
    INS_SNAME VARCHAR2(50),
    INS_CONTACT VARCHAR2(15),
    INS_LEVEL INT
);

CREATE TABLE Customer (
    CUST_ID VARCHAR2(10) PRIMARY KEY,
    CUST_FNAME VARCHAR2(50),
    CUST_SNAME VARCHAR2(50),
    CUST_ADDRESS VARCHAR2(100),
    CUST_CONTACT VARCHAR2(15)
);

CREATE TABLE Dive (
    DIVE_ID INT PRIMARY KEY,
    DIVE_NAME VARCHAR2(50),
    DIVE_DURATION VARCHAR2(20),
    DIVE_LOCATION VARCHAR2(100),
    DIVE_EXP_LEVEL INT,
    DIVE_COST INT
);

CREATE TABLE DiveEvent (
    DIVE_EVENT_ID VARCHAR2(10) PRIMARY KEY,
    DIVE_DATE DATE,
    DIVE_PARTICIPANTS INT,
    INS_ID INT,
    CUST_ID VARCHAR2(10),
    DIVE_ID INT,
    FOREIGN KEY (INS_ID) REFERENCES Instructor(INS_ID),
    FOREIGN KEY (CUST_ID) REFERENCES Customer(CUST_ID),
    FOREIGN KEY (DIVE_ID) REFERENCES Dive(DIVE_ID)
);

-- Step 3: Insert Data
-- Instructor Insertions
INSERT INTO Instructor (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (101, 'James', 'Willis', '0843569851', 7);
INSERT INTO Instructor (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (102, 'Sam', 'Wait', '0763698521', 2);
INSERT INTO Instructor (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (103, 'Sally', 'Gumede', '0786598521', 8);
INSERT INTO Instructor (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (104, 'Bob', 'Du Preez', '0796369857', 3);
INSERT INTO Instructor (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (105, 'Simon', 'Jones', '0826598741', 9);

-- Customer Insertions
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C115', 'Heinrich', 'Willis', '3 Main Road', '0821253659');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C116', 'David', 'Watson', '13 Cape Road', '0769658547');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C117', 'Waldo', 'Smith', '3 Mountain Road', '0863256574');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C118', 'Alex', 'Hanson', '8 Circle Road', '0762356587');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C119', 'Kuhle', 'Bitterhout', '15 Main Road', '0821235258');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C120', 'Thando', 'Zolani', '88 Summer Road', '0847541254');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C121', 'Philip', 'Jackson', '3 Long Road', '0745556658');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C122', 'Sarah', 'Jones', '7 Sea Road', '0814745745');
INSERT INTO Customer (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C123', 'Catherine', 'Howard', '31 Lake Side Road', '0822232521');

-- Dive Insertions
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (550, 'Shark Dive', '3 hours', 'Shark Point', 8, 500);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (551, 'Coral Dive', '1 hour', 'Break Point', 7, 300);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (552, 'Wave Crescent', '2 hours', 'Ship wreck ally', 3, 800);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (553, 'Underwater Exploration', '1 hour', 'Coral ally', 2, 250);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (554, 'Underwater Adventure', '3 hours', 'Sandy Beach', 3, 750);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (555, 'Deep Blue Ocean', '30 minutes', 'Lazy Waves', 2, 120);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (556, 'Rough Seas', '1 hour', 'Pipe', 9, 700);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (557, 'White Water', '2 hours', 'Drifts', 5, 200);
INSERT INTO Dive (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (558, 'Current Adventure', '2 hours', 'Rock Lands', 3, 150);

-- DiveEvent Insertions
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_101', TO_DATE('15/JUL/17', 'DD/MON/YY'), 5, 103, 'C115', 558);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_102', TO_DATE('16/JUL/17', 'DD/MON/YY'), 7, 102, 'C117', 555);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_103', TO_DATE('18/JUL/17', 'DD/MON/YY'), 8, 104, 'C118', 552);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_104', TO_DATE('19/JUL/17', 'DD/MON/YY'), 3, 101, 'C119', 551);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_105', TO_DATE('21/JUL/17', 'DD/MON/YY'), 5, 104, 'C121', 558);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_106', TO_DATE('22/JUL/17', 'DD/MON/YY'), 8, 105, 'C120', 556);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_107', TO_DATE('25/JUL/17', 'DD/MON/YY'), 10, 105, 'C115', 554);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_108', TO_DATE('27/JUL/17', 'DD/MON/YY'), 5, 101, 'C122', 552);
INSERT INTO DiveEvent (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_109', TO_DATE('28/JUL/17', 'DD/MON/YY'), 3, 102, 'C123', 553);

-- Step 4: Sample Queries

-- Query 1: List all customers who participated in a specific dive event
SELECT CUST_ID, DIVE_ID
FROM DiveEvent
WHERE DIVE_ID = 552;

-- Query 2: Find total number of participants for each dive
SELECT DIVE_ID, SUM(DIVE_PARTICIPANTS) AS TotalParticipants
FROM DiveEvent
GROUP BY DIVE_ID;

-- Query 3: List all dives with more than 5 participants
SELECT * 
FROM DiveEvent
WHERE DIVE_PARTICIPANTS > 5;

-- Query 4: Calculate the total cost for each customer
SELECT CUST_ID, SUM(DIVE_COST) AS TotalCost
FROM DiveEvent
JOIN Dive ON DiveEvent.DIVE_ID = Dive.DIVE_ID
GROUP BY CUST_ID;

-- Query 5: Get details of dives conducted on a specific date
SELECT * 
FROM DiveEvent
WHERE DIVE_DATE = TO_DATE('15/JUL/17', 'DD/MON/YY');

-- Query 6: Retrieve information on all dives conducted by a specific instructor
SELECT DiveEvent.*, Dive.*
FROM DiveEvent
JOIN Dive ON DiveEvent.DIVE_ID = Dive.DIVE_ID
WHERE DiveEvent.INS_ID = 101;

-- Question 2

-- Role Creation
CREATE ROLE C##my_admin_role;
CREATE ROLE C##my_general_role;

-- User Creation
CREATE USER C##admin_user IDENTIFIED BY admin_password;
CREATE USER C##general_user IDENTIFIED BY general_password;

-- Granting Privileges to Roles
GRANT CONNECT, RESOURCE TO C##my_admin_role;
GRANT CREATE SESSION TO C##my_admin_role;
GRANT CREATE TABLE, ALTER TABLE, DROP TABLE TO C##my_admin_role;
GRANT CREATE USER, ALTER USER, DROP USER TO C##my_admin_role;
GRANT CREATE ROLE, ALTER ROLE, DROP ROLE TO C##my_admin_role;
GRANT GRANT ANY PRIVILEGE TO C##my_admin_role;

GRANT CONNECT TO C##my_general_role;
GRANT CREATE SESSION TO C##my_general_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON Instructor TO C##my_general_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON Customer TO C##my_general_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON Dive TO C##my_general_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON DiveEvent TO C##my_general_role;

-- Assigning Roles to Users
GRANT C##my_admin_role TO C##admin_user;
GRANT C##my_general_role TO C##general_user;

-- Setting Quotas
ALTER USER C##admin_user QUOTA UNLIMITED ON USERS;
ALTER USER C##general_user QUOTA 100M ON USERS;


-- Question 3
SELECT 
    i.INS_FNAME || ', ' || i.INS_SNAME AS INSTRUCTOR,
    c.CUST_FNAME || ', ' || c.CUST_SNAME AS CUSTOMER,
    d.DIVE_LOCATION,
    de.DIVE_PARTICIPANTS
FROM 
    Dive d
JOIN 
    DiveEvent de ON d.DIVE_ID = de.DIVE_ID
JOIN 
    Instructor i ON de.INS_ID = i.INS_ID
JOIN 
    Customer c ON de.CUST_ID = c.CUST_ID
WHERE 
    de.DIVE_PARTICIPANTS BETWEEN 8 AND 10;
    
--Question 4
SELECT D.DIVE_NAME, DE.DIVE_DATE
FROM DiveEvent DE
JOIN Dive D ON DE.DIVE_ID = D.DIVE_ID
WHERE DE.DIVE_PARTICIPANTS >= 10;

--Question 5
CREATE OR REPLACE PROCEDURE GenerateDiveReport IS
    CURSOR dive_cursor IS
        SELECT DE.DIVE_ID, D.DIVE_NAME, D.DIVE_COST, COUNT(P.CUST_ID) AS ParticipantCount
        FROM DiveEvent DE
        JOIN Dive D ON DE.DIVE_ID = D.DIVE_ID
        JOIN Customer P ON DE.CUST_ID = P.CUST_ID
        GROUP BY DE.DIVE_ID, D.DIVE_NAME, D.DIVE_COST;

    v_diveID DiveEvent.DIVE_ID%TYPE;
    v_diveName Dive.DIVE_NAME%TYPE;
    v_cost Dive.DIVE_COST%TYPE;
    v_participantCount NUMBER;
    v_instructors NUMBER;

    CURSOR participant_cursor (diveID IN DiveEvent.DIVE_ID%TYPE) IS
        SELECT C.CUST_FNAME || ' ' || C.CUST_SNAME
        FROM Customer C
        JOIN DiveEvent DE ON C.CUST_ID = DE.CUST_ID
        WHERE DE.DIVE_ID = diveID;

    v_fullName Customer.CUST_FNAME%TYPE;
BEGIN
    OPEN dive_cursor;
    LOOP
        FETCH dive_cursor INTO v_diveID, v_diveName, v_cost, v_participantCount;
        EXIT WHEN dive_cursor%NOTFOUND;

        -- Determine the number of instructors required
        IF v_participantCount <= 4 THEN
            v_instructors := 1;
        ELSIF v_participantCount <= 8 THEN
            v_instructors := 2;
        ELSE
            v_instructors := 3;
        END IF;

        DBMS_OUTPUT.PUT_LINE('Dive Event: ' || v_diveName);
        DBMS_OUTPUT.PUT_LINE('Cost: ' || v_cost);
        DBMS_OUTPUT.PUT_LINE('Participants: ' || v_participantCount);
        DBMS_OUTPUT.PUT_LINE('Instructors Required: ' || v_instructors);

        OPEN participant_cursor(v_diveID);
        LOOP
            FETCH participant_cursor INTO v_fullName;
            EXIT WHEN participant_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Participant: ' || v_fullName);
        END LOOP;
        CLOSE participant_cursor;

        DBMS_OUTPUT.PUT_LINE('----------------------------');
    END LOOP;
    CLOSE dive_cursor;
END;
/


--Question 6
-- Case 1: Inserting valid data
INSERT INTO dive_event (event_name, participants) VALUES ('Dive Event 1', 10);

-- Case 2: Inserting with 0 participants (should fail)
INSERT INTO dive_event (event_name, participants) VALUES ('Dive Event 2', 0);

-- Case 3: Inserting with more than 20 participants (should fail)
INSERT INTO dive_event (event_name, participants) VALUES ('Dive Event 3', 25);

--Question 7
CREATE OR REPLACE TRIGGER New_Dive_Event
BEFORE INSERT OR UPDATE ON Dive_Event
FOR EACH ROW
BEGIN
    IF :NEW.DIVE_PARTICIPANTS <= 0 OR :NEW.DIVE_PARTICIPANTS > 20 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Number of participants must be between 1 and 20.');
    END IF;
END;
/
--Question 8
CREATE OR REPLACE PROCEDURE sp_Customer_Details (
    p_CUST_ID IN VARCHAR2,
    p_DIVE_DATE IN DATE
)
IS
    v_CUST_FNAME Customer.CUST_FNAME%TYPE;
    v_CUST_SNAME Customer.CUST_SNAME%TYPE;
    v_DIVE_NAME Dive.DIVE_NAME%TYPE;
    
    -- Exception handling
    e_NO_DATA_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_NO_DATA_FOUND, -1403);

BEGIN
    -- Select customer and dive details
    SELECT c.CUST_FNAME, c.CUST_SNAME, d.DIVE_NAME
    INTO v_CUST_FNAME, v_CUST_SNAME, v_DIVE_NAME
    FROM Dive_Event de
    JOIN Customer c ON de.CUST_ID = c.CUST_ID
    JOIN Dive d ON de.DIVE_ID = d.DIVE_ID
    WHERE de.CUST_ID = p_CUST_ID
      AND de.DIVE_DATE = p_DIVE_DATE;
    
    -- Display the details
    DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_CUST_FNAME || ' ' || v_CUST_SNAME);
    DBMS_OUTPUT.PUT_LINE('Dive Name: ' || v_DIVE_NAME);

EXCEPTION
    WHEN e_NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found with ID ' || p_CUST_ID || ' for the dive date ' || TO_CHAR(p_DIVE_DATE, 'YYYY-MM-DD'));
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END sp_Customer_Details;
/
--Question 9
CREATE OR REPLACE FUNCTION calculate_dive_event_cost (
    p_participants IN NUMBER,
    p_cost_per_participant IN NUMBER
)
RETURN NUMBER
IS
    v_total_cost NUMBER;
    
    -- Custom exceptions
    e_invalid_participants EXCEPTION;
    e_invalid_cost_per_participant EXCEPTION;
    
BEGIN
    -- Check for invalid number of participants
    IF p_participants <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Number of participants must be greater than zero.');
    END IF;
    
    -- Check for invalid cost per participant
    IF p_cost_per_participant <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Cost per participant must be greater than zero.');
    END IF;
    
    -- Calculate total cost
    v_total_cost := p_participants * p_cost_per_participant;
    
    -- Return the calculated total cost
    RETURN v_total_cost;
    
EXCEPTION
    WHEN e_invalid_participants THEN
        DBMS_OUTPUT.PUT_LINE('Error: Number of participants must be greater than zero.');
        RETURN NULL;
        
    WHEN e_invalid_cost_per_participant THEN
        DBMS_OUTPUT.PUT_LINE('Error: Cost per participant must be greater than zero.');
        RETURN NULL;
        
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
        RETURN NULL;
END calculate_dive_event_cost;
/
--Question 10 
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class ITGearDealerGUI extends JFrame {
    private JTextField customerIDField;
    private JTextArea customerDetailsArea;
    private JTextField instructorIDField; // Changed from diveIDField
    private JTextArea instructorDivesArea; // Changed from diveAdjustmentsArea

    public ITGearDealerGUI() {
        setTitle("IT Gear Dealer - Reports");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JTabbedPane tabbedPane = new JTabbedPane();

        // Customer Details Tab (similar to original)
        JPanel customerDetailsPanel = new JPanel(new BorderLayout());
        JPanel customerInputPanel = new JPanel(new FlowLayout());
        customerInputPanel.add(new JLabel("Customer ID:"));
        customerIDField = new JTextField(15);
        customerInputPanel.add(customerIDField);
        JButton fetchCustomerButton = new JButton("Fetch Details");
        customerInputPanel.add(fetchCustomerButton);
        fetchCustomerButton.addActionListener(new FetchCustomerDetailsListener());

        customerDetailsArea = new JTextArea();
        customerDetailsArea.setEditable(false);

        customerDetailsPanel.add(customerInputPanel, BorderLayout.NORTH);
        customerDetailsPanel.add(new JScrollPane(customerDetailsArea), BorderLayout.CENTER);

        // Instructor Dives Tab (modified for hardcoded data)
        JPanel instructorDivesPanel = new JPanel(new BorderLayout());
        JPanel instructorInputPanel = new JPanel(new FlowLayout());
        instructorInputPanel.add(new JLabel("Instructor ID:"));
        instructorIDField = new JTextField(15);
        instructorInputPanel.add(instructorIDField);
        JButton fetchDivesButton = new JButton("Fetch Dives");
        instructorInputPanel.add(fetchDivesButton);
        fetchDivesButton.addActionListener(new FetchInstructorDivesListener());

        instructorDivesArea = new JTextArea();
        instructorDivesArea.setEditable(false);

        instructorDivesPanel.add(instructorInputPanel, BorderLayout.NORTH);
        instructorDivesPanel.add(new JScrollPane(instructorDivesArea), BorderLayout.CENTER);

        // Add tabs to tabbed pane
        tabbedPane.addTab("Customer Details", customerDetailsPanel);
        tabbedPane.addTab("Instructor Dives", instructorDivesPanel);

        add(tabbedPane, BorderLayout.CENTER);
    }

    // ActionListener for fetching customer details (similar to original)
    private class FetchCustomerDetailsListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String customerID = customerIDField.getText();
            // Placeholder for fetching customer details (could use hardcoded data or do nothing for simulation)
            customerDetailsArea.setText("Fetching details for Customer ID: " + customerID + "\nDetails: ...");
        }
    }

    // ActionListener for fetching instructor dives (modified for hardcoded data)
    private class FetchInstructorDivesListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String instructorID = instructorIDField.getText();
            int instructorId = Integer.parseInt(instructorID);

            // Simulated data (replace with actual logic if needed)
            List<String> dives = getInstructorDives(instructorId);

            // Display dives in the text area
            instructorDivesArea.setText("");
            for (String dive : dives) {
                instructorDivesArea.append(dive + "\n");
            }
        }

        // Hardcoded data example (replace with actual logic if needed)
        private List<String> getInstructorDives(int instructorId) {
            List<String> dives = new ArrayList<>();
            if (instructorId == 101) {
                dives.add("Dive Event ID: de_101\nDate: 15/JUL/17\nParticipants: 5\nDive ID: 558\nName: Current Adventure\nDuration: 2 hours\nLocation: Rock Lands\nExperience Level: 3\nCost: 150");
                dives.add("Dive Event ID: de_105\nDate: 21/JUL/17\nParticipants: 5\nDive ID: 554\nName: Underwater Adventure\nDuration: 3 hours\nLocation: Sandy Beach\nExperience Level: 3\nCost: 750");
            } else if (instructorId == 102) {
                dives.add("Dive Event ID: de_109\nDate: 28/JUL/17\nParticipants: 3\nDive ID: 553\nName: Underwater Exploration\nDuration: 1 hour\nLocation: Coral ally\nExperience Level: 2\nCost: 250");
            } else {
                dives.add("No dives found for Instructor ID: " + instructorId);
            }
            return dives;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ITGearDealerGUI app = new ITGearDealerGUI();
            app.setVisible(true);
        });
    }
}
